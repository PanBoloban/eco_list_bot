from webbrowser import get
from aiogram.utils import executor
from aiogram import Bot
from aiogram.dispatcher import Dispatcher
from aiogram import types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from email import message
import os

from constant import ID_ADMIN_ECHO, TOKEN, URL_APP
from keyboards import inclient_kb, DELKB


storage = MemoryStorage()
bot = Bot(token = TOKEN)
dp = Dispatcher(bot, storage = storage)

async def on_startup(dp):
    await bot.set_webhook(URL_APP)

async def on_shutdown(dp):
    await bot.delete_webhook()


'''********************************* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ ****************************'''


@dp.message_handler(commands=['start', 'help'])
async def command_start(message : types.Message):
    try:
        await bot.send_message(message.from_user.id,(f'üëã –†–∞–¥ –≤–∏–¥–µ—Ç—å –í–∞—Å {message.from_user.full_name}! –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ:'), reply_markup=inclient_kb)
        await message.delete()
    except:
        await message.reply('–û–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –õ–°, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—É: https://t.me/EcoListBot')


'''***************************** –ö–Ω–æ–ø–∫–∞ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑*******************'''

class FSMZakaz(StatesGroup):
    name_product = State()
    quantity = State()
    fio = State()
    city = State()
    telefon = State()

# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–∞—à–∏–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
@dp.message_handler(commands=['–û—Ñ–æ—Ä–º–∏—Ç—å'], state = None)
async def cm_start(message : types.Message):
    await FSMZakaz.name_product.set()
    await message.reply('–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:', reply_markup=DELKB)

# –õ–æ–≤–∏–º –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
@dp.message_handler(state = FSMZakaz.name_product)
async def load_name_product(message: types.Message, state = FSMContext):
    async with state.proxy() as data:
        data['–¢–æ–≤–∞—Ä'] = message.text
    await FSMZakaz.next()
    await message.reply('\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Å–∫–æ–ª—å–∫–æ —à—Ç) —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª–æ–∂–∏—Ç—å –í–∞–º –≤ –∑–∞–∫–∞–∑:')

# –õ–æ–≤–∏–º –≤—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—Ç
@dp.message_handler(state = FSMZakaz.quantity)
async def load_quantity(message: types.Message, state = FSMContext):
    async with state.proxy() as data:
        data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] = message.text
    await FSMZakaz.next()
    await message.reply('\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è –∫—Ç–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑–∞:')

# –õ–æ–≤–∏–º —Ç—Ä–µ—Ç–∏–π –æ—Ç–≤–µ—Ç
@dp.message_handler(state = FSMZakaz.fio)
async def load_fio(message: types.Message, state = FSMContext):
    async with state.proxy() as data:
        data['–ò–º—è'] = message.text
    await FSMZakaz.next()
    await message.reply('\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à –≥–æ—Ä–æ–¥ –∏ —É–ª–∏—Ü—É:')

# –õ–æ–≤–∏–º —á–µ—Ç–≤–µ—Ä—Ç—ã –æ—Ç–≤–µ—Ç 
@dp.message_handler(state = FSMZakaz.city)
async def load_city(message: types.Message, state = FSMContext):
    async with state.proxy() as data:
        data['–ê–¥—Ä–µ—Å'] = message.text
    await FSMZakaz.next()
    await message.reply('\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à –º–æ–±–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')

# –õ–æ–≤–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç
@dp.message_handler(state = FSMZakaz.telefon)
async def load_telefon(message: types.Message, state = FSMContext):
    async with state.proxy() as data:
        data['–¢–µ–ª–µ—Ñ–æ–Ω'] = message.text
    await message.reply('–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!\n\n–ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ñ–æ—Ä–º–∏—Ç –∑–∞–∫–∞–∑ –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!\n–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ - –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é!', reply_markup=inclient_kb)
    async with state.proxy() as data:
        await bot.send_message(chat_id=ID_ADMIN_ECHO,text=(message.from_user.full_name, message.from_user.id, str(data)))
    await state.finish()


''' *************************** –ú–∞—à–∏–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–∫–∞–∑—É ******************'''

class FSMInfo(StatesGroup):
    name_telefon_client = State()
    question = State()

# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–∞—à–∏–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
@dp.message_handler(commands = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', state = None)
async def info_start(message : types.Message):
    await FSMInfo.name_telefon_client.set()
    await message.reply('–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–æ–º—É –∑–∞–∫–∞–∑—É –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 2 –≤–æ–ø—Ä–æ—Å–∞.\n'
                       '\n1. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —É–∫–∞–∑–∞–Ω –≤ –∑–∞–∫–∞–∑–µ:', reply_markup=DELKB)

# –õ–æ–≤–∏–º –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
@dp.message_handler(state = FSMInfo.name_telefon_client)
async def load_name_telefon_client(message: types.Message, state = FSMContext):
    async with state.proxy() as data:
        data['–¢–µ–ª–µ—Ñ–æ–Ω'] = message.text
    await FSMInfo.next()
    await message.reply('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞! \n\n2. –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ –∑–∞–∫–∞–∑—É:')

# –õ–æ–≤–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç
@dp.message_handler(state = FSMInfo.question)
async def load_question(message: types.Message, state = FSMContext):
    async with state.proxy() as data:
        data['–í–æ–ø—Ä–æ—Å'] = message.text
    await message.reply('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É, –æ–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!\n–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã - –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é!', reply_markup=inclient_kb)
    async with state.proxy() as data:
        await bot.send_message(chat_id=ID_ADMIN_ECHO,text=(message.from_user.full_name, message.from_user.id, str(data)))
    await state.finish()

'''*********************** –õ–æ–≤–∏–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ –∏ –¥–∞–µ–º –æ—Ç–≤–µ—Ç *********************'''

@dp.message_handler()
async def operator_work_command(message : types.Message):
    if message.text == 'üü¢ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑':
        await cm_start(message)
    elif message.text == '‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–æ–º—É –∑–∞–∫–∞–∑—É':
        await info_start(message)
    elif message.text == '‚è± –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã':
        await bot.send_message(message.from_user.id,'–ó–∞–∫–∞–∑—ã —á–µ—Ä–µ–∑ —Å–∞–π—Ç Eco-List.ru –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫—Ä—É–≥–ª–∞—Å—É—Ç–æ—á–Ω–æ, –æ–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç: –ü–Ω-–ü—Ç —Å 12:00 –¥–æ 20:00; –°–± —Å 12:00 –¥–æ 18:00; –í—Å - –≤—ã—Ö–æ–¥–Ω–æ–π.')
        await bot.send_message(chat_id=ID_ADMIN_ECHO,text=message.text)
    elif message.text == 'üì© –ù–∞–ø–∏—Å–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É':
        await bot.send_message(message.from_user.id, '–ß—Ç–æ –±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: https://telegram.me/Eco_List')
        await bot.send_message(chat_id=ID_ADMIN_ECHO,text=message.text)
    else:
        await bot.send_message(message.from_user.id, '–ë–æ—Ç –Ω–µ –Ω–∞—à–µ–ª –æ—Ç–≤–µ—Ç, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ.', reply_markup=inclient_kb)
        await bot.send_message(chat_id = ID_ADMIN_ECHO, text=(message.from_user.full_name, message.from_user.id, message.text))

'''********************************* –ö–æ–Ω–µ—Ü –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–¥–∞ ********************'''



#bot.polling(none_stop=True, interval=0)
executor.start_polling(dp, skip_updates=True)
# executor.start_webhook(
    # dispatcher = dp,
    # webhook_path = '',
    # on_startup = on_startup,
    # on_shutdown = on_shutdown,
    # skip_updates = True,
    # host = '0.0.0.0',
    # port = int(os.environ.get('PORT', 5000)))
