from webbrowser import get
from aiogram.utils import executor
from aiogram import Bot
from aiogram.dispatcher import Dispatcher
from aiogram import types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from email import message
import os
# import pymysql

# from constant import HOST, USER_LOG_HOST, PASSW_HOST, NAME_BD
from constant import ID_ADMIN_ECHO, TOKEN, URL_APP
from keyboards import inclient_kb, DELKB
from bd import connect_bd_phon_st, connect_bd_phone_nam


storage = MemoryStorage()
bot = Bot(token = TOKEN)
dp = Dispatcher(bot, storage = storage)

async def on_startup(dp):
    await bot.set_webhook(URL_APP)

async def on_shutdown(dp):
    await bot.delete_webhook()


'''********************************* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ ****************************'''


@dp.message_handler(commands=['start', 'help'])
async def command_start(message : types.Message):
    try:
        await bot.send_message(message.from_user.id,(f'üëã –†–∞–¥ –≤–∏–¥–µ—Ç—å –í–∞—Å {message.from_user.full_name}! –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ:'), reply_markup=inclient_kb)
        await message.delete()
    except:
        await message.reply('–û–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –õ–°, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—É: https://t.me/EcoListBot')


'''***************************** –ö–Ω–æ–ø–∫–∞ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑*******************'''

class FSMZakaz(StatesGroup):
    name_product = State()
    quantity = State()
    fio = State()
    city = State()
    telefon = State()

# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–∞—à–∏–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
@dp.message_handler(commands=['–û—Ñ–æ—Ä–º–∏—Ç—å'], state = None)
async def cm_start(message : types.Message):
    await FSMZakaz.name_product.set()
    await message.reply('–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:', reply_markup=DELKB)

# –õ–æ–≤–∏–º –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
@dp.message_handler(state = FSMZakaz.name_product)
async def load_name_product(message: types.Message, state = FSMContext):
    async with state.proxy() as data:
        data['–¢–æ–≤–∞—Ä'] = message.text
    await FSMZakaz.next()
    await message.reply('\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Å–∫–æ–ª—å–∫–æ —à—Ç) —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª–æ–∂–∏—Ç—å –í–∞–º –≤ –∑–∞–∫–∞–∑:')

# –õ–æ–≤–∏–º –≤—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—Ç
@dp.message_handler(state = FSMZakaz.quantity)
async def load_quantity(message: types.Message, state = FSMContext):
    async with state.proxy() as data:
        data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] = message.text
    await FSMZakaz.next()
    await message.reply('\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è –∫—Ç–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑–∞:')

# –õ–æ–≤–∏–º —Ç—Ä–µ—Ç–∏–π –æ—Ç–≤–µ—Ç
@dp.message_handler(state = FSMZakaz.fio)
async def load_fio(message: types.Message, state = FSMContext):
    async with state.proxy() as data:
        data['–ò–º—è'] = message.text
    await FSMZakaz.next()
    await message.reply('\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à –≥–æ—Ä–æ–¥ –∏ —É–ª–∏—Ü—É:')

# –õ–æ–≤–∏–º —á–µ—Ç–≤–µ—Ä—Ç—ã –æ—Ç–≤–µ—Ç 
@dp.message_handler(state = FSMZakaz.city)
async def load_city(message: types.Message, state = FSMContext):
    async with state.proxy() as data:
        data['–ê–¥—Ä–µ—Å'] = message.text
    await FSMZakaz.next()
    await message.reply('\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à –º–æ–±–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')

# –õ–æ–≤–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç
@dp.message_handler(state = FSMZakaz.telefon)
async def load_telefon(message: types.Message, state = FSMContext):
    async with state.proxy() as data:
        data['–¢–µ–ª–µ—Ñ–æ–Ω'] = message.text
    await message.reply('–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!\n\n–ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ñ–æ—Ä–º–∏—Ç –∑–∞–∫–∞–∑ –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!\n–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ - –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é!', reply_markup=inclient_kb)
    async with state.proxy() as data:
        await bot.send_message(chat_id=ID_ADMIN_ECHO,text=(message.from_user.full_name, message.from_user.id, str(data)))
    await state.finish()


''' *************************** –ú–∞—à–∏–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–∫–∞–∑—É ******************'''

class FSMInfo(StatesGroup):
    name_telefon_client = State()
    # question = State()

# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–∞—à–∏–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
@dp.message_handler(commands = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', state = None)
async def info_start(message : types.Message):
    await FSMInfo.name_telefon_client.set()
    await message.reply('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —É–∫–∞–∑–∞–Ω –≤ –∑–∞–∫–∞–∑–µ (–ß–µ—Ä–µ–∑ +7):',reply_markup=DELKB)

# –õ–æ–≤–∏–º –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
@dp.message_handler(state = FSMInfo.name_telefon_client)
async def load_name_telefon_client(message: types.Message, state = FSMContext):
    mess = "".join(c for c in message.text if  c.isdecimal()) # –º–æ–∂–µ—Ç —á–µ—Ä–µ–∑ int, —É–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–æ–±–µ–ª
    namber_order = connect_bd_phone_nam()
    phone_status = connect_bd_phon_st()
    if mess in phone_status:
        if phone_status[mess] == 'new':
            await message.reply(f'–í–∞—à –∑–∞–∫–∞–∑ {namber_order[mess]} –≤ —Å—Ç–∞—Ç—É—Å–µ "–ù–æ–≤—ã–π", –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–±–æ—Ä–∫–∏.\n–ö–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç —Å–æ–±—Ä–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ (–ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –∏–ª–∏ –Ω–∞–ø–∏—à–µ—Ç –ø–∏—Å—å–º–æ)', reply_markup=inclient_kb)
        elif phone_status[mess] == 'processing':
            await message.reply(f'–í–∞—à –∑–∞–∫–∞–∑ {namber_order[mess]} –≤ —Å—Ç–∞—Ç—É—Å–µ "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ", –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–±–æ—Ä–∫–∏.\n–ö–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç —Å–æ–±—Ä–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ (–ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –∏–ª–∏ –Ω–∞–ø–∏—à–µ—Ç –ø–∏—Å—å–º–æ)', reply_markup=inclient_kb)
        elif phone_status[mess] == 'podtverzhdenie-z':
            await message.reply(f'–í–∞—à –∑–∞–∫–∞–∑ {namber_order[mess]} –≤ —Å—Ç–∞—Ç—É—Å–µ "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞".\n–ó–∞–∫–∞–∑ —Å–æ–±—Ä–∞–Ω, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ (–ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –∏–ª–∏ –Ω–∞–ø–∏—à–µ—Ç –ø–∏—Å—å–º–æ)', reply_markup=inclient_kb)
        elif phone_status[mess] == 'ne-dozvonilis':
            await message.reply(f'–í–∞—à –∑–∞–∫–∞–∑ {namber_order[mess]} –≤ —Å—Ç–∞—Ç—É—Å–µ "–ù–µ –¥–æ–∑–≤–æ–Ω–∏–ª–∏—Å—å".\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: https://telegram.me/Eco_List –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É', reply_markup=inclient_kb)
        elif phone_status[mess] == 'ozhidanie':
            await message.reply(f'–í–∞—à –∑–∞–∫–∞–∑ {namber_order[mess]} –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —É–ø–∞–∫–æ–≤–∫—É. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –æ–Ω –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –í–∞–º', reply_markup=inclient_kb)
        elif phone_status[mess] == 'dolgoe-ozhidanie':
            await message.reply(f'–í–∞—à –∑–∞–∫–∞–∑ {namber_order[mess]} –æ–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.\n–ö–æ–≥–¥–∞ –∑–∞–∫–∞–∑–∞ –±—É–¥–µ—Ç —É–∫–æ–º–ª–µ–∫—Ç–æ–≤–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏', reply_markup=inclient_kb)
        elif phone_status[mess] == 'sformirovan-pred':
            await message.reply(f'–í–∞—à –∑–∞–∫–∞–∑ {namber_order[mess]} —Å–æ–±—Ä–∞–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—É.\n–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –í–∞–º –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É.\n–ï—Å–ª–∏ –ø–∏—Å—å–º–æ –æ—Ç –Ω–∞—Å –Ω–µ –ø—Ä–∏—à–ª–æ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É "–°–ø–∞–º"', reply_markup=inclient_kb)
        elif phone_status[mess] in ['na-upakovke', 'na-upakovke-boks', 'na-upakovke-po-r', 'na-upakovke-msk-', 'na-upakovke-ross', 'na-upakovke-poch']:
            await message.reply(f'–í–∞—à –∑–∞–∫–∞–∑ {namber_order[mess]} —É–ø–∞–∫–æ–≤–∞–Ω, —Å–µ–π—á–∞—Å –µ–≥–æ –ø–µ—Ä–µ–¥–∞—é—Ç –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –≤ –∫—É—Ä—å–µ—Ä—Å–∫—É—é —Å–ª—É–∂–±—É.\n–ñ–µ–ª–∞–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ –∑–∞–∫–∞–∑—É - –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: https://telegram.me/Eco_List –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É', reply_markup=inclient_kb)
        elif phone_status[mess] == 'paid':
            await message.reply(f'–í–∞—à –∑–∞–∫–∞–∑ {namber_order[mess]} –æ–ø–ª–∞—á–µ–Ω.\n–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫ –í–∞–º, –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –ø–∏—Å—å–º–µ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ', reply_markup=inclient_kb)
        elif phone_status[mess] in ['samovyvoz-msk', 'otpravlen-kurero', 'samovyvoz-boksbe', 'samovyvoz-po-ros', 'samovyvoz-msk-sd', 'samovyvoz-rossiy']:
            await message.reply(f'–í–∞—à –∑–∞–∫–∞–∑ {namber_order[mess]} –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –≤ –∫—É—Ä—å–µ—Ä—Å–∫—É—é —Å–ª—É–∂–±—É.\n–ö–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –ø–æ—Å—Ç—É–ø–∏—Ç –≤ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –í–∞—Å –æ–ø–æ–≤–µ—Å—Ç—è—Ç —Å–º—Å, –µ—Å–ª–∏ –í–∞—à –∑–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª—è—Ç –∫—É—Ä—å–µ—Ä - –æ–Ω –ø–æ–∑–≤–æ–Ω–∏—Ç –í–∞–º –ø–µ—Ä–µ–¥ –¥–æ—Å—Ç–∞–≤–∫–æ–π.\n–ö–∞–∫ –æ—Ç—Å–ª–µ–¥–∏—Ç—å –ø—É—Ç—å –ø–æ—Å—ã–ª–∫–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –ø–∏—Å—å–º–µ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–æ–π –ø–æ—á—Ç–µ', reply_markup=inclient_kb)
        elif phone_status[mess] == 'shipped':
            await message.reply(f'–í–∞—à –∑–∞–∫–∞–∑ {namber_order[mess]} –æ—Ç–ø—Ä–∞–ª–µ–Ω –ø–æ—á—Ç–æ–π –†–æ—Å—Å–∏–∏.\n–ù–æ–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—É—Ç–∏ –ø–æ—Å—ã–ª–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –í–∞–º –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É.', reply_markup=inclient_kb)
        elif phone_status[mess] == 'postupil-v-punkt':
            await message.reply(f'–í–∞—à –∑–∞–∫–∞–∑ {namber_order[mess]} –ø–æ—Å—Ç—É–ø–∏–ª –≤ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏.\n–ù–æ–º–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ —Å–º—Å –æ—Ç –∫—É—Ä—å–µ—Ä—Å–∫–æ–π —Å–ª—É–∂–±—ã –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: https://telegram.me/Eco_List –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É.', reply_markup=inclient_kb)
        elif phone_status[mess] in ['vozvrat-iz-kurer', 'refunded']:
            await message.reply(f'–°—Ç–∞—Ç—É—Å –í–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ {namber_order[mess]} "–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –∫—É—Ä—å–µ—Ä—Å–∫–æ–π —Å–ª—É–∂–±—ã".\n–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ —Å–∞–π—Ç–µ Eco-List.ru', reply_markup=inclient_kb)
        elif phone_status[mess] == 'deleted':
            await message.reply(f'–í–∞—à –∑–∞–∫–∞–∑ {namber_order[mess]} –æ—Ç–º–µ–Ω–µ–Ω.\n–î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: https://telegram.me/Eco_List –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É.', reply_markup=inclient_kb)
        elif phone_status[mess] == 'completed':
            await message.reply(f'–í–∞—à –∑–∞–∫–∞–∑ {namber_order[mess]} –≤—ã–ø–æ–ª–Ω–µ–Ω.\n–°–ø–∞—Å–∏–±–æ –í–∞–º –∑–∞ –∑–∞–∫–∞–∑!', reply_markup=inclient_kb)
        else:
            await message.reply('–Ø –Ω–µ –Ω–∞—à–µ–ª –í–∞—à –∑–∞–∫–∞–∑.\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: https://telegram.me/Eco_List –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É.', reply_markup=inclient_kb)
    else:
        await message.reply('–í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤–≤–µ–ª–∏ –í–´ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞(—á–µ—Ä–µ–∑ +7), –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –∏ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.', reply_markup=inclient_kb)
    # async with state.proxy() as data:
        # await bot.send_message(chat_id=ID_ADMIN_ECHO,text=(message.from_user.full_name, message.from_user.id, str(data)))
    await state.finish()
    # async with state.proxy() as data:
        # data['–¢–µ–ª–µ—Ñ–æ–Ω'] = message.text
    # await FSMInfo.next()
    # await message.reply('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞! \n\n2. –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ –∑–∞–∫–∞–∑—É:')

# –õ–æ–≤–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç
# @dp.message_handler(state = FSMInfo.question)
# async def load_question(message: types.Message, state = FSMContext):
    # async with state.proxy() as data:
        # data['–í–æ–ø—Ä–æ—Å'] = message.text
    # await message.reply('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É, –æ–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!\n–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã - –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é!', reply_markup=inclient_kb)
    # async with state.proxy() as data:
        # await bot.send_message(chat_id=ID_ADMIN_ECHO,text=(message.from_user.full_name, message.from_user.id, str(data)))
    # await state.finish()

'''*********************** –õ–æ–≤–∏–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ –∏ –¥–∞–µ–º –æ—Ç–≤–µ—Ç *********************'''

@dp.message_handler()
async def operator_work_command(message : types.Message):
    if message.text == 'üü¢ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑':
        await cm_start(message)
        await bot.send_message(chat_id=ID_ADMIN_ECHO,text=message.text)
    elif message.text == '‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–æ–º—É –∑–∞–∫–∞–∑—É':
        await info_start(message)
        await bot.send_message(chat_id=ID_ADMIN_ECHO,text=message.text)
    elif message.text == '‚è± –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã':
        await bot.send_message(message.from_user.id,'–ó–∞–∫–∞–∑—ã —á–µ—Ä–µ–∑ —Å–∞–π—Ç Eco-List.ru –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫—Ä—É–≥–ª–∞—Å—É—Ç–æ—á–Ω–æ, –æ–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç: –ü–Ω-–ü—Ç —Å 12:00 –¥–æ 20:00; –°–± —Å 12:00 –¥–æ 18:00; –í—Å - –≤—ã—Ö–æ–¥–Ω–æ–π.')
        await bot.send_message(chat_id=ID_ADMIN_ECHO,text=message.text)
    elif message.text == 'üì© –ù–∞–ø–∏—Å–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É':
        await bot.send_message(message.from_user.id, '–ß—Ç–æ –±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: https://telegram.me/Eco_List')
        await bot.send_message(chat_id=ID_ADMIN_ECHO,text=message.text)
    else:
        await bot.send_message(message.from_user.id, '–ë–æ—Ç –Ω–µ –Ω–∞—à–µ–ª –æ—Ç–≤–µ—Ç, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ.', reply_markup=inclient_kb)
        await bot.send_message(chat_id = ID_ADMIN_ECHO, text=(message.from_user.full_name, message.from_user.id, message.text))

'''********************************* –ö–æ–Ω–µ—Ü –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–¥–∞ ********************'''



#bot.polling(none_stop=True, interval=0)
# #executor.start_polling(dp, skip_updates=True)
# executor.start_webhook(
    # dispatcher = dp,
    # webhook_path = '',
    # on_startup = on_startup,
    # on_shutdown = on_shutdown,
    # skip_updates = True,
    # host = '0.0.0.0',
    # port = int(os.environ.get('PORT', 5000)))
